import UIKit
import AVFoundation
import Alamofire

class ScoringViewController: UIViewController {
    
    
    //전 화면에서 받은 데이터
    var noreceivedValueFromBeforeVC = ""
    var scopereceivedValueFromBeforeVC = ""
    var dancefilereceivedValueFromBeforeVC = ""
    var titlereceivedValueFromBeforeVC = ""
    var creatorreceivedValueFromBeforeVC = ""
    var textreceivedValueFromBeforeVC = ""
    var numberoflikereceivedValueFromBeforeVC = ""
    var checklikereceivedValueFromBeforeVC = ""
    var downloadedDatareceivedValueFromBeforeVC = ""
    var userfilereceivedValueFromBeforeVC = ""
    
    
    //전역변수 설정
    var no: [String] = []
    var scope: [String] = []
    var title1: [String] = []
    var dancefile: [String]!
    var creator: [String] = []
    var text: [String] = []
    var numberoflike: [String] = []
    var checklike: [String] = []
    var downloadedData: [String]!
    
    
    
    //
    var player: AVPlayer?
    var isPlaying = false
    var timer: Timer?
    
    
    
    //
    let videoPlayerView = UIView()
    //var cameraRecordView = UIView()
    let videoSlider = UISlider()
    let currentTimeLabel = UILabel()
    let videoLengthLabel = UILabel()
    //let scoreLabel = UILabel()
    //let closeButton = UIButton()
    
    

    //
    enum Settings {
        static let screenW: CGFloat = 375
        static let playerHeight: CGFloat = Settings.screenW * (9/16)
        static let endpoint = URL(string: "http://download.appboomclap.co.kr/ad/ad_1.mp4")
    }
    
    
    //
    var cnt = 0
    var array : [String] = ["a","b","c","d","e","f","g","h"]
    var score : [String] = []
    
    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        print("-------------------------------------------------------------")
        print("컨텐츠 번호 : \(noreceivedValueFromBeforeVC)")
        print("번호 : \(scopereceivedValueFromBeforeVC)")
        print("댄스파일 : \(dancefilereceivedValueFromBeforeVC)")
        print("제목 : \(titlereceivedValueFromBeforeVC)")
        print("부제목 : \(creatorreceivedValueFromBeforeVC)")
        print("텍스트: \(textreceivedValueFromBeforeVC)")
        print("좋아요 수 : \(numberoflikereceivedValueFromBeforeVC)")
        print("좋아요 체크 : \(checklikereceivedValueFromBeforeVC)")
        print("유저파일 : \(userfilereceivedValueFromBeforeVC)")
        print("-------------------------------------------------------------")
        
        
        
        
        //
        //REST API URL 요청(광고)
//        let _url = "http://ruyi-boomclap-elb-1137529646.ap-northeast-2.elb.amazonaws.com:8080/BoomClap/Main"
//        let parameters3: Parameters = [
//            "protocol": NetworkProtocol().GET_AD_REQ,
//        ]
//        Alamofire.request(_url, method: .post, parameters: parameters3).responseJSON { response in
//            if response.result.value != nil {
//
//            }
//
//            if let data = response.data, let utf8Text = String(data: data, encoding: .utf8) {
//                print("요청결과: \(utf8Text)")
//                print("요청결과2: \(utf8Text)")
//
//                //
//                let utf8text = "\(utf8Text)"
//                var cnt = 0
//                var array : [String] = ["a","b","c","d","e","f","g","h"]
//
//                //
//                for utf8text in utf8text.components(separatedBy: .newlines) {
//                    array[cnt] = utf8text
//                    cnt += 1
//                }
//
//                //
//                let c = array[2].split {$0 == "#"}.map(String.init)
//
//                //
//                for i in 0..<c.count {
//                    print("c: \(c)")
//                    print("i: \(c[0])")
//                    print("사용자 번호: \(c[0])")
//                    print("i:", i)
//                }
//            }
//        }
        //
        
        
        
        
        //
        player?.play()
        
        
        
        
        

        //
        videoPlayerView.backgroundColor = UIColor.red
        videoPlayerView.translatesAutoresizingMaskIntoConstraints = false
        let topConstraint = NSLayoutConstraint(item: videoPlayerView, attribute: .top, relatedBy: .equal, toItem: view, attribute: .top, multiplier: 1, constant: 0)
        let bottomConstraint = NSLayoutConstraint(item: videoPlayerView, attribute: .bottom, relatedBy: .equal, toItem: view, attribute: .bottom, multiplier: 1, constant: 0)
        let leadingConstraint = NSLayoutConstraint(item: videoPlayerView, attribute: .leading, relatedBy: .equal, toItem: view, attribute: .leading, multiplier: 1, constant: 0)
        let trailingConstraint = NSLayoutConstraint(item: videoPlayerView, attribute: .trailing, relatedBy: .equal, toItem: view, attribute: .trailing, multiplier: 1, constant: 0)
        view.addSubview(videoPlayerView)
        view.addConstraints([topConstraint, bottomConstraint, leadingConstraint, trailingConstraint])
        
        
        
        //
//        cameraRecordView.backgroundColor = UIColor.green
//        cameraRecordView.isUserInteractionEnabled = true
//        cameraRecordView.translatesAutoresizingMaskIntoConstraints = false
//        self.view.addSubview(cameraRecordView)
//
//        cameraRecordView.snp.makeConstraints { (make) in
//            make.trailing.equalTo(10)
//            make.bottom.equalToSuperview()
//            make.width.equalToSuperview().dividedBy(6)
//            make.height.equalToSuperview().dividedBy(7)
//            make.bottom.equalTo(self.view.safeAreaLayoutGuide).offset(-60)
//        }
        
        
        //
//        scoreLabel.text = ""
//        scoreLabel.isUserInteractionEnabled = true
//        scoreLabel.translatesAutoresizingMaskIntoConstraints = false
//        scoreLabel.textColor = UIColor.black
//        scoreLabel.font = UIFont.systemFont(ofSize: 18)
//        scoreLabel.textAlignment = .center
//        self.cameraRecordView.addSubview(scoreLabel)
//
//        scoreLabel.snp.makeConstraints { (make) in
//            make.leading.equalTo(10)
//            make.trailing.equalTo(-10)
//            make.height.equalTo(50)
//            make.centerY.equalTo(cameraRecordView).offset(-75)
//        }
        
        
        //
        videoSlider.translatesAutoresizingMaskIntoConstraints = false
        videoSlider.isUserInteractionEnabled = true
        videoSlider.minimumTrackTintColor = UIColor.red
        videoSlider.maximumTrackTintColor = UIColor.white
        videoSlider.setThumbImage(UIImage(named: "thumb"), for: .normal)
        videoSlider.addTarget(self, action: #selector(handleSliderChange), for: .valueChanged)
        self.view.addSubview(videoSlider)
        
        videoSlider.snp.makeConstraints { (make) in
            make.leading.equalTo(75)
            make.trailing.equalTo(-75)
            make.bottom.equalTo(view.safeAreaLayoutGuide).offset(-22)
        }
        
        
        
        //
        currentTimeLabel.text = "00:00"
        currentTimeLabel.isUserInteractionEnabled = true
        currentTimeLabel.translatesAutoresizingMaskIntoConstraints = false
        currentTimeLabel.textColor = UIColor.black
        currentTimeLabel.font = UIFont.systemFont(ofSize: 14)
        currentTimeLabel.textAlignment = .left
        self.view.addSubview(currentTimeLabel)
        
        currentTimeLabel.snp.makeConstraints { (make) in
            make.trailing.equalTo(videoSlider.snp.leading).offset(-10)
            make.bottom.equalTo(view.safeAreaLayoutGuide).offset(-22)
        }
        
        
        
        
        //
        videoLengthLabel.text = "00:00"
        videoLengthLabel.isUserInteractionEnabled = true
        videoLengthLabel.translatesAutoresizingMaskIntoConstraints = false
        videoLengthLabel.textColor = UIColor.black
        videoLengthLabel.font = UIFont.systemFont(ofSize: 14)
        videoLengthLabel.textAlignment = .right
        self.view.addSubview(videoLengthLabel)
        
        //
        videoLengthLabel.snp.makeConstraints { (make) in
            make.leading.equalTo(videoSlider.snp.trailing).offset(10)
            make.bottom.equalTo(view.safeAreaLayoutGuide).offset(-22)
        }
        
        
        
        
//        //
//        closeButton.setTitle("닫기", for: .normal)
//        closeButton.titleLabel?.font = UIFont.systemFont(ofSize: 15)
//        closeButton.addTarget(self, action: #selector(closeButtonTapped), for: .touchUpInside)
//        closeButton.backgroundColor = UIColor.black
//        self.view.addSubview(closeButton)
//
//        //
//        closeButton.snp.makeConstraints { (make) in
//            make.trailing.equalTo(-20)
//            make.top.equalTo(30)
//        }
    }
    
    
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
    open override var shouldAutorotate: Bool {
        return false
    }

    open override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .landscapeRight
    }

    open override var preferredInterfaceOrientationForPresentation: UIInterfaceOrientation {
        return .landscapeRight
    }
//---------------------------------------------------------------------------------------------------------------------------------------
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        setupVideoPlayer()
    }
//---------------------------------------------------------------------------------------------------------------------------------------
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
    func setupVideoPlayer() {
        let url = Settings.endpoint
        
        player = AVPlayer(url: url!)
        let playerLayer = AVPlayerLayer(player: player)
        playerLayer.frame = videoPlayerView.bounds
        playerLayer.videoGravity = .resizeAspect
        
        videoPlayerView.layer.addSublayer(playerLayer)
        player?.play()
        
        
        player?.addObserver(self, forKeyPath: "currentItem.loadedTimeRanges", options: .new, context: nil)
        let interval = CMTime(value: 1, timescale: 2)
        player?.addPeriodicTimeObserver(forInterval: interval, queue: DispatchQueue.main, using: { (progressTime) in
            let seconds = CMTimeGetSeconds(progressTime)
            let secondsString = String(format: "%02d", Int(seconds) % 60)
            let minutesString = String(format: "%02d", Int(seconds) / 60)
            self.currentTimeLabel.text = "\(minutesString):\(secondsString)"
            //NotificationCenter.default.addObserver(self, selector: #selector(MainViewController.didfinishPlaying(note:)), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: self.player?.currentItem)
            
            
            
            if let duration = self.player?.currentItem?.duration {
                let durationSeconds = CMTimeGetSeconds(duration)
                
                //print("value of duratioinSeconds: \(seconds))")
                //print("value of Seconds: \(durationSeconds)")
                
                self.videoSlider.value = Float(seconds / durationSeconds)
            }
        })
    }
//---------------------------------------------------------------------------------------------------------------------------------------
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "currentItem.loadedTimeRanges" {
            isPlaying = true
            
            if let duration = player?.currentItem?.asset.duration {
                let seconds = CMTimeGetSeconds(duration)
                let secondsText = String(format: "%02d", Int(seconds) % 60)
                let minutesText = String(format: "%02d", Int(seconds) / 60)
                videoLengthLabel.text = "\(minutesText):\(secondsText)"
                
                //print("Seconds :: \(seconds)")
                //print("secondsText :: \(secondsText)")
                //print("minutesText :: \(minutesText)")
                //print("videoLengthLabel :: \(videoLengthLabel)")
                
                //NotificationCenter.default.addObserver(self, selector: #selector(MainViewController.didfinishPlaying(note:)), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: self.player?.currentItem)
                
                //NotificationCenter.default.addObserver(self, selector: #selector(MainViewController.didfinishPlaying(note:)), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: nil)
                
                NotificationCenter.default.addObserver(self, selector: #selector(playerDidFinishPlaying), name: .AVPlayerItemDidPlayToEndTime, object: nil)
            }
        }
    }
//---------------------------------------------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------------------------------------------
//    @objc func closeButtonTapped(sender: UIButton) {
//
//        if isPlaying {
//            let alert = UIAlertController(title: "채점을 종료하시겠습니까?", message: "추후에 앨범 탭에서 점수 확인 가능합니다.", preferredStyle: .alert)
//            let okaction = UIAlertAction(title: "예", style: UIAlertAction.Style.default){ (action: UIAlertAction) -> Void in
//
//            }
//
//            let noaction = UIAlertAction(title: "아니오", style: UIAlertAction.Style.default){ (action: UIAlertAction) -> Void in
//
//            }
//
//            alert.addAction(okaction)
//            alert.addAction(noaction)
//
//            self.present(alert, animated: true)
//
//        } else {
//            print("1")
//
//        }
//
//    }
//---------------------------------------------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------------------------------------------
    @objc func handlePause(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
        if isPlaying {
            player?.pause()
        } else {
            player?.play()
        }
        isPlaying = !isPlaying
    }
//---------------------------------------------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------------------------------------------
    @objc func handleSliderChange(_ sender:UISlider) {
        print(videoSlider.value)
        
        if let duration = player?.currentItem?.duration {
            let totalSeconds = CMTimeGetSeconds(duration)
            let value = Float64(videoSlider.value) * totalSeconds
            let seekTime = CMTime(value: Int64(value), timescale: 1)
            player?.seek(to: seekTime, completionHandler: { (completedSeek) in
                
            })
        }
    }
//---------------------------------------------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------------------------------------------
    //@objc func didfinishPlaying(note : NSNotification)  {
        //print("채점 끝")
        
        //self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
        
        
        //let dialog = UIAlertController(title: "Your Score is \n A", message: "Very Good", preferredStyle: .alert)
        //let okaction = UIAlertAction(title: "확인", style: UIAlertAction.Style.default){ (action: UIAlertAction) -> Void in
        //}
        
        //let noaction = UIAlertAction(title: "아니오", style: UIAlertAction.Style.default){ (action: UIAlertAction) -> Void in
        //}

        //dialog.addAction(okaction)
        //dialog.addAction(noaction)
        
        //self.present(dialog, animated: true, completion: nil)
        
   //}
    
    //deinit {
        //NotificationCenter.default.removeObserver(self)
    //}
//---------------------------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------------------------
//
//---------------------------------------------------------------------------------------------------------------------------------------
    @objc func playerDidFinishPlaying(note: NSNotification) {
        
        let dialog = UIAlertController(title: "채점이 완료되었습니다.\n 결과를 확인하시겠습니까?", message: "", preferredStyle: .alert)
        let okaction = UIAlertAction(title: "예", style: UIAlertAction.Style.default) { (action: UIAlertAction) -> Void in
            //self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
  
//---------------------------------------------------------------------------------------------------------------------------------------
//
//---------------------------------------------------------------------------------------------------------------------------------------
            let _url3 = "http://ruyi-boomclap-elb-1137529646.ap-northeast-2.elb.amazonaws.com:8080/BoomClap/Main"
            let parameters3: Parameters = [
                "protocol": NetworkProtocol().GET_USER_GRADE_REQ,
                "user_file": self.userfilereceivedValueFromBeforeVC,
            ]
            print("parameter3:", parameters3)
            
            Alamofire.request(_url3, method: .post, parameters: parameters3).responseJSON { response in
                if response.result.value != nil {

                }

                if let data = response.data, let utf8Text = String(data: data, encoding: .utf8) {
                    let utf8text = "\(utf8Text)"
                    for utf8text in utf8text.components(separatedBy: .newlines) {
                        self.array[self.cnt] = utf8text
                        self.cnt += 1
                    }
                    self.score = self.array[2].split {$0 == "#"}.map(String.init)
                    print("1:", self.score)
                    print("2:", "\(self.score[0])")
                    
                    let test = utf8Text.components(separatedBy: ["\r","\n"])
                    print("test:", test)

                    print("--------------요청 프로토콜 : 134--------------------------------")
                    print("요청 프로토콜:",NetworkProtocol().GET_USER_GRADE_REQ)
                    print("요청결과: ", utf8Text)
                    print("점수: ",self.score)
                    print("점수2:", "\(self.score[0])")
                    print("-------------------------------------------------------------")
                    
                    print("-------------------------------------------------------------")
                    print("c1:", self.score)
                    print("c2:", "\(self.score[0])")
                    print("-------------------------------------------------------------")
                    
                    
//---------------------------------------------------------------------------------------------------------------------------------------
                    let dialog = UIAlertController(title: "\(self.score[0])" , message: "", preferredStyle: .alert)
                    let okaction = UIAlertAction(title: "확인", style: UIAlertAction.Style.default){ (action: UIAlertAction) -> Void in
                        //self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
                        
                        
                        
                        //let vc = SixthViewController()
                        //vc.modalPresentationStyle = .fullScreen
                        //self.dismiss(animated: true, completion: {
                        //})
                        
                        
                        
                        //let viewControllers : [UIViewController] = self.navigationController!.viewControllers as [UIViewController]
                        
                        
                        
                        //let viewControllers : [UIViewController] = self.navigationController!.viewControllers as [UIViewController]
                        //self.navigationController?.pushViewController(viewControllers[viewControllers.count - 3 ], animated: false)
                        
                        
                        
                        //self.presentingViewController?.dismiss(animated: true, completion: nil)
                        
                        
                        //let viewControllers : [UIViewController] = self.navigationController!.viewControllers as [UIViewController]
                        //self.navigationController?.popToViewController(viewControllers[viewControllers.count - 1 ], animated: false)
                        
                    }

                    dialog.addAction(okaction)
                    self.present(dialog, animated: true, completion: nil)
//---------------------------------------------------------------------------------------------------------------------------------------
                }
            }
//---------------------------------------------------------------------------------------------------------------------------------------
            
            
//---------------------------------------------------------------------------------------------------------------------------------------
        }
        
        let noaction = UIAlertAction(title: "아니오", style: UIAlertAction.Style.default){ (action: UIAlertAction) -> Void in
            
            //
            let dialog = UIAlertController(title: "취소 되었습니다.", message: "", preferredStyle: .alert)
            let okaction = UIAlertAction(title: "확인", style: UIAlertAction.Style.default) { (action: UIAlertAction) -> Void in
                self.view.window?.rootViewController?.dismiss(animated: true, completion: nil)
            }
            
            dialog.addAction(okaction)
            self.present(dialog, animated: true, completion: nil)
            
        }
        
        dialog.addAction(okaction)
        dialog.addAction(noaction)
        
        self.present(dialog, animated: true, completion: nil)
    }
//---------------------------------------------------------------------------------------------------------------------------------------
    
    
    
    
    
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
    func stopPlayer() {
        if let player = player {
            print("stoped")
            player.pause()
            //player == nil
            print("player deallocated")
        
        } else {
            print("player was already deallocated")
            
        }
    }
//---------------------------------------------------------------------------------------------------------------------------------------
}
